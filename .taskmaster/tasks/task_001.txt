# Task ID: 1
# Title: Initialize Node.js Project and Setup Express Server
# Status: done
# Dependencies: None
# Priority: high
# Description: Set up the basic project structure for the web application. This includes initializing a Node.js project, installing the Express framework, and creating a basic server file that can serve a static HTML page.
# Details:
Run `npm init -y` to create a package.json file. Install Express by running `npm install express`. Create a main server file (e.g., `server.js`) and configure it to start a simple HTTP server and serve static files from a 'public' directory. The server should listen on a configurable port.

# Test Strategy:
Run `node server.js` and verify that you can access a placeholder HTML page by navigating to `http://localhost:PORT` in a web browser. The server should start without errors.

# Subtasks:
## 1. Install Node.js and Verify Installation [done]
### Dependencies: None
### Description: Download and install the latest Long-Term Support (LTS) version of Node.js. Verify that both Node.js and npm (Node Package Manager) are correctly installed and accessible from the command line.
### Details:
Go to the official Node.js website (nodejs.org) and download the LTS installer for your operating system. After installation, open a terminal or command prompt and run `node -v` and `npm -v` to confirm they output their respective version numbers.

## 2. Initialize npm Project and Create package.json [done]
### Dependencies: 1.1
### Description: Create a new project directory and initialize it as a Node.js project using npm. This will generate a `package.json` file to manage project metadata and dependencies.
### Details:
Create a new folder for the project. Navigate into this folder using the command line and run the command `npm init -y`. This will create a default `package.json` file in the project root.

## 3. Install Express and Add to Dependencies [done]
### Dependencies: 1.2
### Description: Install the Express.js web application framework, which will be used to build the server. Ensure it is saved as a project dependency in the `package.json` file.
### Details:
In the project's root directory, run the command `npm install express`. This will download the Express package into a `node_modules` folder and add it to the `dependencies` section of your `package.json` file.

## 4. Create Project Folder Structure [done]
### Dependencies: 1.2
### Description: Establish a basic folder structure for the project to organize files. This includes creating a 'public' directory for static assets like HTML, CSS, and client-side JavaScript, and a main server file.
### Details:
In the project's root directory, create a new folder named `public`. Also, create the main server file, for example, `server.js`, in the root directory.

## 5. Implement and Test Basic Express Server [done]
### Dependencies: 1.3, 1.4
### Description: Write the initial server code using Express to create an HTTP server. Configure it to serve static files from the 'public' directory and listen for requests on a configurable port.
### Details:
In `server.js`, require Express, create an app instance, and use `express.static('public')` middleware. Define a port (e.g., `const PORT = process.env.PORT || 3000;`). Start the server with `app.listen()`. Create a simple `index.html` file in the `public` directory to test. Run `node server.js` and navigate to `http://localhost:3000` in a browser to verify it works.

