# Task ID: 7
# Title: Implement Frontend JavaScript for Button Controls
# Status: pending
# Dependencies: 5, 6
# Priority: high
# Description: Write client-side JavaScript to handle clicks on the 'Open', 'Close', and 'Stop' buttons. Clicking a button should trigger a request to the corresponding backend API endpoint.
# Details:
In a new `app.js` file (linked from `index.html`), add event listeners to each of the three buttons. When a button is clicked, use the `fetch()` API to send a POST request to the appropriate backend endpoint (e.g., `fetch('/api/control/open', { method: 'POST' })`). Handle the response and log success or failure to the console.

# Test Strategy:
Open the browser's developer tools. Click each button on the webpage and check the 'Network' tab to ensure the correct POST request is being sent to the backend. Verify with the physical gate that the commands are being executed.

# Subtasks:
## 1. Create app.js and Link to index.html [pending]
### Dependencies: None
### Description: Set up a new JavaScript file named app.js and ensure it is properly linked in the index.html file so that the script loads when the page is accessed.
### Details:
Create app.js in the project directory. Add a <script src="app.js"></script> tag before the closing </body> tag in index.html to load the script after the DOM is ready.

## 2. Select Button Elements and Add Event Listeners [pending]
### Dependencies: 7.1
### Description: In app.js, select the 'Open', 'Close', and 'Stop' buttons from the DOM and attach click event listeners to each using addEventListener().
### Details:
Use document.getElementById or document.querySelector to select each button. Use addEventListener('click', ...) to attach a handler function to each button.

## 3. Implement Fetch POST Requests to Backend Endpoints [pending]
### Dependencies: 7.2
### Description: Within each button's click event handler, use the fetch() API to send a POST request to the corresponding backend API endpoint (/api/control/open, /api/control/close, /api/control/stop).
### Details:
Write asynchronous functions for each button that call fetch() with the appropriate URL and method: 'POST'.

## 4. Handle and Log API Responses [pending]
### Dependencies: 7.3
### Description: Process the response from each fetch request, logging success or failure to the browser console for debugging and feedback.
### Details:
Check the response status and use console.log() to indicate whether the request succeeded or failed. Optionally, handle errors using try/catch.

## 5. Test Button Interactions and Network Requests [pending]
### Dependencies: 7.4
### Description: Open the webpage in a browser, use developer tools to monitor network activity, and verify that clicking each button sends the correct POST request and logs the expected output.
### Details:
Use the browser's Network tab to confirm requests are sent to the correct endpoints. Check the console for success/failure logs. Physically verify gate operation if possible.

